matrix:
  include:
    - os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env: NAME="gcc7 + Qt4 + release"
      addons:
        apt:
          packages:
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release
      - gcc --version
      - cd build-release
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=release "OPEN_CV_VERSION_MAJOR=3"
      - make -j2
      - oclgrind ./test/engine/engine
      - oclgrind ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt4 + release + quad"
      addons:
        apt:
          packages:
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release
      - cd build-release
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=release DEFINES+=NB_COORD_PRECISION=4
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt4 + release + cuda9"
      addons:
        apt:
          packages:
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - gnupg-curl
      script:
      - sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
      - echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
      - sudo apt-get update -y
      - sudo apt-get install -y cuda-minimal-build-9-2
      - sudo ln -s /usr/local/cuda-9.2 /usr/local/cuda
      - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
      - export PATH=/usr/local/cuda/bin:$PATH
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release-cuda
      - cd build-release-cuda
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=release
      - make -j2
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      if: branch = master
      env: NAME="gcc5 + coverity + Qt5 + debug + cuda11"
      addons:
        apt:
          packages:
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - gnupg-curl
      before_script:
      - sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
      - echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
      - sudo apt-get update -y
      - sudo apt-get install -y cuda-minimal-build-11-3
      - sudo ln -s /usr/local/cuda-11.3 /usr/local/cuda
      - wget --no-verbose https://scan.coverity.com/download/cxx/Linux --post-data "token=${COVERITY_TOKEN}&project=drons%2Fnbody" -O coverity_tool.tgz
      - tar xzf ./coverity_tool.tgz
      - gcc --version
      - cat cov-analysis*/VERSION | grep externalVersion
      script:
      - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
      - export PATH=/usr/local/cuda/bin:$PATH
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-debug-coverity
      - cd build-debug-coverity
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug
      - ../cov-analysis*/bin/cov-configure --gcc
      - ../cov-analysis*/bin/cov-build --dir cov-int make -j2
      - cat cov-int/build-log.txt
      - tar czvf nbody.tgz cov-int
      - curl --form token=${COVERITY_TOKEN} --form email=drons@list.ru --form file=@nbody.tgz --form version=${TRAVIS_COMMIT} --form description="${TRAVIS_COMMIT_MESSAGE}" https://scan.coverity.com/builds?project=drons%2Fnbody
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt5 + debug + cuda10 + float"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - ocl-icd-opencl-dev
          - gnupg-curl
      script:
      - sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
      - echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
      - sudo apt-get update -y
      - sudo apt-get install -y cuda-minimal-build-10-2
      - sudo ln -s /usr/local/cuda-10.2 /usr/local/cuda
      - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
      - export PATH=/usr/local/cuda/bin:$PATH
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-debug-cuda
      - cd build-debug-cuda
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug CONFIG+=NO_UI DEFINES+=NB_COORD_PRECISION=1
      - make -j2
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt4 + release + float"
      addons:
        apt:
          packages:
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release
      - cd build-release
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=release DEFINES+=NB_COORD_PRECISION=1
      - make -j2
    - os: linux
      dist: trusty
      sudo: required
      compiler: clang
      env: NAME="clang + Qt5 + release"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libiomp-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release-clang
      - cd build-release-clang
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release -spec linux-clang
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: focal
      arch: arm64
      compiler: gcc
      env: NAME="gcc9 + Qt5 + release + ARM64"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release-arm64
      - cd build-release-arm64
      - which /usr/lib/*/qt5/bin/qmake
      - /usr/lib/aarch64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release "OPEN_CV_VERSION_MAJOR=4"
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream

    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc6 + Qt5 + release"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-6
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-6 --version
      - sudo ln -f -s /usr/bin/gcc-6 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-6 /usr/bin/g++
      - gcc --version
      - mkdir build-release-gcc6
      - cd build-release-gcc6
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc7 + Qt5 + release"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-7
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-7 --version
      - sudo ln -f -s /usr/bin/gcc-7 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-7 /usr/bin/g++
      - gcc --version
      - mkdir build-release-gcc7
      - cd build-release-gcc7
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc8 + Qt5 + release"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-8
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-8 --version
      - sudo ln -f -s /usr/bin/gcc-8 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-8 /usr/bin/g++
      - gcc --version
      - mkdir build-release-gcc8
      - cd build-release-gcc8
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release
      - make -j2
      - oclgrind ./test/engine/engine
      - oclgrind ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc9 + Qt5 + debug"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-9
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-9 --version
      - sudo ln -f -s /usr/bin/gcc-9 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-9 /usr/bin/g++
      - gcc --version
      - mkdir build-debug-gcc9
      - cd build-debug-gcc9
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug
      - make -j2
      - oclgrind ./test/engine/engine
      - oclgrind ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: focal
      compiler: gcc
      env: NAME="PVS + Qt5 + cuda11"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - opencl-clhpp-headers
          - wget
          - strace
      before_script:
          - wget -q -O - https://files.viva64.com/etc/pubkey.txt | sudo apt-key add -
          - sudo wget -O /etc/apt/sources.list.d/viva64.list https://files.viva64.com/etc/viva64.list
          - sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
          - echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
          - sudo apt update -y
          - sudo apt install -y cuda-minimal-build-11-4 pvs-studio
          - sudo ln -s /usr/local/cuda-11.4 /usr/local/cuda
      script:
          - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          - export PATH=/usr/local/cuda/bin:$PATH
          - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
          - mkdir build-debug-pvs
          - cd build-debug-pvs
          - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug "OPEN_CV_VERSION_MAJOR=4"
          - pvs-studio-analyzer credentials drons@list.ru ${PVS_KEY}
          - pvs-studio-analyzer trace -- make -j 2
          - pvs-studio-analyzer analyze --cfg ../test/pvs/analyze.cfg -o ./pvs-studio-analyzer.out.log -j2
          - plog-converter -a "GA:1,2;64:1,2;OP:1,2" -s ../test/pvs/plog.cfg -t errorfile -e -o ./pvs-error-list.txt -r ../ ./pvs-studio-analyzer.out.log
          - cat ./pvs-error-list.txt
          - test "$(cat ./pvs-error-list.txt | wc -l)" -le 1

language:
  - cpp
