matrix:
  include:
    - os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env: NAME="gcc7 + Qt4 + release"
      addons:
        apt:
          packages:
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release
      - gcc --version
      - cd build-release
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=release "OPEN_CV_VERSION_MAJOR=3"
      - make -j2
      - oclgrind ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt4 + release + quad"
      addons:
        apt:
          packages:
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release
      - cd build-release
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=release DEFINES+=NB_COORD_PRECISION=4
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt4 + release + cuda9"
      addons:
        apt:
          packages:
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - gnupg-curl
      script:
      - sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
      - echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
      - sudo apt-get update -y
      - sudo apt-get install -y cuda-minimal-build-9-2
      - sudo ln -s /usr/local/cuda-9.2 /usr/local/cuda
      - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
      - export PATH=/usr/local/cuda/bin:$PATH
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release-cuda
      - cd build-release-cuda
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=release
      - make -j2
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt5 + debug + cuda10 + float"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - ocl-icd-opencl-dev
          - gnupg-curl
      script:
      - sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
      - echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
      - sudo apt-get update -y
      - sudo apt-get install -y cuda-minimal-build-10-2
      - sudo ln -s /usr/local/cuda-10.2 /usr/local/cuda
      - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
      - export PATH=/usr/local/cuda/bin:$PATH
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-debug-cuda
      - cd build-debug-cuda
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug CONFIG+=NO_UI DEFINES+=NB_COORD_PRECISION=1
      - make -j2
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt4 + release + float"
      addons:
        apt:
          packages:
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release
      - cd build-release
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=release DEFINES+=NB_COORD_PRECISION=1
      - make -j2
    - os: linux
      dist: xenial
      sudo: required
      compiler: gcc
      env: NAME="gcc5 + Qt4 + gcov + debug"
      addons:
        apt:
          packages:
          - gdb
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-debug-gcov
      - cd build-debug-gcov
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=debug CONFIG+=build-gcov
      - make -j2
      - oclgrind ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
      - ./test/main/nbody-simulation --engine=simple --solver=rkdp --verbose=1 --check_list="PLVE"
      - ./test/main/nbody-simulation --engine=simple --solver=rkdp --verbose=1 --check_list="PLVE" --max_time=1 --initial_state=./test/data/zeno_ascii.txt --output=/tmp/nbody/zeno_ascii
      - ./test/main/nbody-simulation --engine=simple --solver=rkdp --verbose=1 --check_list="PLVE" --max_time=2 --resume=/tmp/nbody/zeno_ascii
      - ./test/main/nbody-simulation --engine=simple --solver=rkdp --verbose=1 --check_list="PLVE" --max_time=1 --initial_state=./test/data/zeno_table.txt --initial_type=G1
      - ./test/main/nbody-simulation --engine=simple --solver=rkdp --verbose=1 --check_list="PLVE" --max_time=1 --initial_state=./test/data/zeno_table.txt --initial_type=SI
      - ./test/main/nbody-simulation --engine=simple --solver=rkdp --verbose=1 --check_list="PLVE" --max_time=1 --initial_state=./test/data/zeno_table.txt --initial_type=ADK
      - cd nbody
      - gcov ./*
      after_success:
      - bash <(curl -s https://codecov.io/bash)
    - os: linux
      dist: trusty
      sudo: required
      compiler: gcc
      env: NAME="gcc4 + Qt4 + valgrind + debug"
      addons:
        apt:
          packages:
          - gdb
          - valgrind
          - libqt4-dev
          - libqt4-opengl-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-debug-valgrind
      - cd build-debug-valgrind
      - /usr/lib/x86_64-linux-gnu/qt4/bin/qmake ../nbody.pro CONFIG+=debug
      - make -j2
      - valgrind --tool=memcheck --trace-children=yes --log-file=./memsupp.log --gen-suppressions=all --smc-check=all --read-var-info=yes --leak-check=full --track-origins=yes ./test/memsupp/memsupp
      - grep -v "==" ./memsupp.log | sed 's/_ZN12test_memsuppC1Ev/\*/g'> ./valg.supp
      - valgrind --tool=memcheck --error-exitcode=1 --trace-children=yes --suppressions=./valg.supp --suppressions=../test/memsupp/memcheck.supp --gen-suppressions=all --smc-check=all --read-var-info=yes --leak-check=full --track-origins=yes ./test/engine/engine
      - valgrind --tool=memcheck --error-exitcode=1 --trace-children=yes --suppressions=./valg.supp --suppressions=../test/memsupp/memcheck.supp --gen-suppressions=all --smc-check=all --read-var-info=yes --leak-check=full --track-origins=yes ./test/solver/solver
      - valgrind --tool=memcheck --error-exitcode=1 --trace-children=yes --suppressions=./valg.supp --suppressions=../test/memsupp/memcheck.supp --gen-suppressions=all --smc-check=all --read-var-info=yes --leak-check=full --track-origins=yes ./test/extrapolator/extrapolator
      - valgrind --tool=memcheck --error-exitcode=1 --trace-children=yes --suppressions=./valg.supp --suppressions=../test/memsupp/memcheck.supp --gen-suppressions=all --smc-check=all --read-var-info=yes --leak-check=full --track-origins=yes ./test/stream/stream
    - os: linux
      dist: trusty
      sudo: required
      compiler: clang
      env: NAME="clang + Qt5 + release"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libiomp-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release-clang
      - cd build-release-clang
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release -spec linux-clang
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: focal
      arch: arm64
      compiler: gcc
      env: NAME="gcc9 + Qt5 + release + ARM64"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release-arm64
      - cd build-release-arm64
      - which /usr/lib/*/qt5/bin/qmake
      - /usr/lib/aarch64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release "OPEN_CV_VERSION_MAJOR=4"
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: trusty
      sudo: required
      compiler: clang
      env: NAME="LLVM Scanbuild"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - mkdir build-release-scanbuild
      - cd build-release-scanbuild
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release
      - scan-build -maxloop 4 -analyze-headers -analyzer-config stable-report-filename=true -o ./ make -j2
    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc6 + Qt5 + release"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-6
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-6 --version
      - sudo ln -f -s /usr/bin/gcc-6 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-6 /usr/bin/g++
      - gcc --version
      - mkdir build-release-gcc6
      - cd build-release-gcc6
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc7 + Qt5 + release"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-7
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-7 --version
      - sudo ln -f -s /usr/bin/gcc-7 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-7 /usr/bin/g++
      - gcc --version
      - mkdir build-release-gcc7
      - cd build-release-gcc7
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc8 + Qt5 + release"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-8
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-8 --version
      - sudo ln -f -s /usr/bin/gcc-8 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-8 /usr/bin/g++
      - gcc --version
      - mkdir build-release-gcc8
      - cd build-release-gcc8
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=release
      - make -j2
      - oclgrind ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc9 + Qt5 + debug"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-9
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - oclgrind
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-9 --version
      - sudo ln -f -s /usr/bin/gcc-9 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-9 /usr/bin/g++
      - gcc --version
      - mkdir build-debug-gcc9
      - cd build-debug-gcc9
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug
      - make -j2
      - oclgrind ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: xenial
      sudo: required
      env: NAME="gcc8 + Qt5 + ASAN"
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-8
          - gdb
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
      script:
      - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
      - gcc --version
      - gcc-8 --version
      - sudo ln -f -s /usr/bin/gcc-8 /usr/bin/gcc
      - sudo ln -f -s /usr/bin/g++-8 /usr/bin/g++
      - gcc --version
      - mkdir build-asan-gcc8
      - cd build-asan-gcc8
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug CONFIG+=build-asan
      - make -j2
      - ./test/engine/engine
      - ./test/solver/solver
      - ./test/extrapolator/extrapolator
      - ./test/solvers_equality/solvers_equality
      - ./test/stream/stream
    - os: linux
      dist: focal
      compiler: gcc
      env: NAME="PVS + Qt5 + cuda11"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
          - ocl-icd-opencl-dev
          - opencl-clhpp-headers
          - wget
          - strace
      before_script:
          - wget -q -O - https://files.viva64.com/etc/pubkey.txt | sudo apt-key add -
          - sudo wget -O /etc/apt/sources.list.d/viva64.list https://files.viva64.com/etc/viva64.list
          - sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
          - echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
          - sudo apt update -y
          - sudo apt install -y cuda-minimal-build-11-4 pvs-studio
          - sudo ln -s /usr/local/cuda-11.4 /usr/local/cuda
      script:
          - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          - export PATH=/usr/local/cuda/bin:$PATH
          - export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
          - mkdir build-debug-pvs
          - cd build-debug-pvs
          - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug "OPEN_CV_VERSION_MAJOR=4"
          - pvs-studio-analyzer credentials drons@list.ru ${PVS_KEY}
          - pvs-studio-analyzer trace -- make -j 2
          - pvs-studio-analyzer analyze --cfg ../test/pvs/analyze.cfg -o ./pvs-studio-analyzer.out.log -j2
          - plog-converter -a "GA:1,2;64:1,2;OP:1,2" -s ../test/pvs/plog.cfg -t errorfile -e -o ./pvs-error-list.txt -r ../ ./pvs-studio-analyzer.out.log
          - cat ./pvs-error-list.txt
          - test "$(cat ./pvs-error-list.txt | wc -l)" -le 1
    - os: linux
      dist: focal
      compiler: gcc
      env: NAME="Astyle check"
      addons:
        apt:
          packages:
          - astyle
      script:
      - astyle --options=.astylerc --recursive *.{h,cpp,cl,cu}
      - git diff --exit-code
    - os: linux
      dist: focal
      compiler: gcc
      env: NAME="cppcheck"
      addons:
        apt:
          packages:
          - cppcheck
      script:
          - cppcheck -DNB_COORD_PRECISION=4 --suppressions-list=./test/cppcheck/supp.txt --library=microsoft_sal,posix,qt,std,windows --quiet --force --enable=all --template=gcc --error-exitcode=1 -j 2 ./
          - cppcheck -DNB_COORD_PRECISION=2 --suppressions-list=./test/cppcheck/supp.txt --library=microsoft_sal,posix,qt,std,windows --quiet --force --enable=all --template=gcc --error-exitcode=1 -j 2 ./
          - cppcheck -DNB_COORD_PRECISION=1 --suppressions-list=./test/cppcheck/supp.txt --library=microsoft_sal,posix,qt,std,windows --quiet --force --enable=all --template=gcc --error-exitcode=1 -j 2 ./
    - os: linux
      dist: xenial
      compiler: gcc
      env: NAME="codespell"
      addons:
        apt:
          packages:
          - codespell
      script:
      - codespell
      - git diff --exit-code
    - os: linux
      dist: focal
      sudo: required
      compiler: clang
      env: NAME="clang + Qt5 + debug + oclint"
      addons:
        apt:
          packages:
          - qt5-qmake
          - qtbase5-dev
          - qtbase5-dev-tools
          - libqt5opengl5-dev
          - libopencv-dev
          - bear
          - wget
      script:
      - mkdir build-debug-oclint
      - cd build-debug-oclint
      - wget https://github.com/oclint/oclint/releases/download/v21.05/oclint-21.05-llvm-12.0.0-x86_64-linux-ubuntu-20.04.tar.gz -O oclint.tar.gz
      - tar xzfv oclint.tar.gz
      - /usr/lib/x86_64-linux-gnu/qt5/bin/qmake ../nbody.pro CONFIG+=debug -spec linux-clang "OPEN_CV_VERSION_MAJOR=4"
      - bear make
      - oclint-21.05/bin/oclint-json-compilation-database -e test* -e moc_* -p ./ -- -max-priority-1 0 -max-priority-2 3 -max-priority-3 3 -enable-global-analysis -enable-clang-static-analyzer -disable-rule RedundantLocalVariable -disable-rule ParameterReassignment -rc CYCLOMATIC_COMPLEXITY=15 -rc LONG_LINE=180 -rc SHORT_VARIABLE_NAME=1 -rc LONG_VARIABLE_NAME=40 -rc LONG_METHOD=150 -rc NCSS_METHOD=80 -rc NPATH_COMPLEXITY=256
    - os: linux
      dist: bionic
      env: NAME="flawfinder"
      addons:
        apt:
          packages:
          - lynx
          - wget
          - python
          - curl
      script:
      - wget https://dwheeler.com/flawfinder/flawfinder-2.0.10.tar.gz -O flawfinder.tar.gz
      - tar xzf flawfinder.tar.gz
      - cd ./flawfinder-2.0.10
      - sudo make prefix=/usr install
      - cd .. && rm -rf ./flawfinder-*
      - flawfinder --html --context --minlevel=0 ./ > output.html
      - lynx -dump -nolist output.html

language:
  - cpp

env:
  global:
   - secure: "iwBEXO8w5jQVp2MK8WUPx49Jlx+1HjIAXQKtViAC3nsRFamV+3O6v7B1bsO9YhC72TwcmRYeYrzgp4hVsYQuK3l84R9cFoV7Ur1iaa5gcMgFGcIZvjyCYtPv55KKRVB9dMTECnRWUi8O71McAHMxoE9+8AgDcR4t2vCcWejyj2D1axYLO7Z5DqQPMNpmPL5FfLM48tLDgrMhGwApBXvgYWnNpA21mMHQQF8donAPOmq1j7FEa/tkBPc8RFFQvMcvCgw/0BmBVkxPfLKb8JOL5zMs6uU8VUf3TGLpxZdgxi9iL6DF+OGclbm0aVVA3n3kmRVY8djyzVr+QzpVQVNNrjtliEg8KN6CCbIvVvHSvsJhDUW2ZyJyiPv2gAlnqXf4XWkhKooO8xzkVqjeSgCSbLdLGPR7a8ElstbTjqK+A41NVGxdmc1n6yp4fiqznmXG0mhHhbbUo+gqbKyZ7t4OedNhbjyo7bWy1I6im1w98Qu5D0P45FfDAQtkJcm9gGZGSh7MjO0dL1VmK/bh9zHGsd9v6Zr2CkkmbY7taXj63DSfTCYoGTvkL3LKAppEp/RMAxSkprTMlSUh/F/GX4fCsvE3y4Ze8cO5heAfcv6xcq94cRrCCNCSP9PujZEZM0ITYhdSM1d9rAWuzs41MgtfMPK+IfWQE3I9mfLXmuAnyok="

addons:
  coverity_scan:
    project:
      name: "drons/nbody"
      description: "Build submitted via Travis CI"
    notification_email: drons@list.ru
    build_command_prepend: mkdir build-debug-coverity && cd build-debug-coverity && qmake-qt4 ../nbody.pro CONFIG+=debug
    build_command:   "make -j 2"
    branch_pattern: coverity_scan
  apt:
    packages:
    - gdb
    - libqt4-dev
    - libqt4-opengl-dev
    - libopencv-dev

